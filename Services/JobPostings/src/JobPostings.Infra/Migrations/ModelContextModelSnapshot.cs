// <auto-generated />
using System;
using JobPostings.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobPostings.Infra.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobPostings.Domain.CompanyAggregate.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("JobPostings.Domain.JobPostingAggregate.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("_companyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("_companyId");

                    b.ToTable("JobPostings", (string)null);
                });

            modelBuilder.Entity("JobPostings.Domain.JobPostingAggregate.JobPosting", b =>
                {
                    b.HasOne("JobPostings.Domain.CompanyAggregate.Company", "Company")
                        .WithMany()
                        .HasForeignKey("_companyId");

                    b.OwnsOne("JobPostings.Domain.JobPostingAggregate.ExpirationDate", "ExpireAt", b1 =>
                        {
                            b1.Property<Guid>("JobPostingId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ExpireAt");

                            b1.HasKey("JobPostingId");

                            b1.ToTable("JobPostings");

                            b1.WithOwner()
                                .HasForeignKey("JobPostingId");
                        });

                    b.OwnsOne("JobPostings.Domain.JobPostingAggregate.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("JobPostingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Place")
                                .HasColumnType("text")
                                .HasColumnName("Location");

                            b1.HasKey("JobPostingId");

                            b1.ToTable("JobPostings");

                            b1.WithOwner()
                                .HasForeignKey("JobPostingId");
                        });

                    b.OwnsOne("JobPostings.Domain.JobPostingAggregate.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("JobPostingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Role");

                            b1.HasKey("JobPostingId");

                            b1.ToTable("JobPostings");

                            b1.WithOwner()
                                .HasForeignKey("JobPostingId");
                        });

                    b.OwnsOne("JobPostings.Domain.JobPostingAggregate.Salary", "Salary", b1 =>
                        {
                            b1.Property<Guid>("JobPostingId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Compensation");

                            b1.HasKey("JobPostingId");

                            b1.ToTable("JobPostings");

                            b1.WithOwner()
                                .HasForeignKey("JobPostingId");
                        });

                    b.Navigation("Company");

                    b.Navigation("ExpireAt");

                    b.Navigation("Location");

                    b.Navigation("Role");

                    b.Navigation("Salary");
                });
#pragma warning restore 612, 618
        }
    }
}
